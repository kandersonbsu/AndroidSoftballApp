
package com.example.softballapp;

import com.example.softballapp.PlayerCursor.Factory;
import io.objectbox.EntityInfo;
import io.objectbox.annotation.apihint.Internal;
import io.objectbox.internal.CursorFactory;
import io.objectbox.internal.IdGetter;
import io.objectbox.internal.ToOneGetter;
import io.objectbox.relation.RelationInfo;
import io.objectbox.relation.ToOne;

// THIS CODE IS GENERATED BY ObjectBox, DO NOT EDIT.

/**
 * Properties for entity "Player". Can be used for QueryBuilder and for referencing DB names.
 */
public final class Player_ implements EntityInfo<Player> {

    // Leading underscores for static constants to avoid naming conflicts with property names

    public static final String __ENTITY_NAME = "Player";

    public static final int __ENTITY_ID = 1;

    public static final Class<Player> __ENTITY_CLASS = Player.class;

    public static final String __DB_NAME = "Player";

    public static final CursorFactory<Player> __CURSOR_FACTORY = new Factory();

    @Internal
    static final PlayerIdGetter __ID_GETTER = new PlayerIdGetter();

    public final static Player_ __INSTANCE = new Player_();

    public final static io.objectbox.Property<Player> id =
        new io.objectbox.Property<>(__INSTANCE, 0, 1, long.class, "id", true, "id");

    public final static io.objectbox.Property<Player> firstName =
        new io.objectbox.Property<>(__INSTANCE, 1, 2, String.class, "firstName");

    public final static io.objectbox.Property<Player> lastName =
        new io.objectbox.Property<>(__INSTANCE, 2, 3, String.class, "lastName");

    public final static io.objectbox.Property<Player> teamId =
        new io.objectbox.Property<>(__INSTANCE, 3, 4, long.class, "teamId", true);

    @SuppressWarnings("unchecked")
    public final static io.objectbox.Property<Player>[] __ALL_PROPERTIES = new io.objectbox.Property[]{
        id,
        firstName,
        lastName,
        teamId
    };

    public final static io.objectbox.Property<Player> __ID_PROPERTY = id;

    @Override
    public String getEntityName() {
        return __ENTITY_NAME;
    }

    @Override
    public int getEntityId() {
        return __ENTITY_ID;
    }

    @Override
    public Class<Player> getEntityClass() {
        return __ENTITY_CLASS;
    }

    @Override
    public String getDbName() {
        return __DB_NAME;
    }

    @Override
    public io.objectbox.Property<Player>[] getAllProperties() {
        return __ALL_PROPERTIES;
    }

    @Override
    public io.objectbox.Property<Player> getIdProperty() {
        return __ID_PROPERTY;
    }

    @Override
    public IdGetter<Player> getIdGetter() {
        return __ID_GETTER;
    }

    @Override
    public CursorFactory<Player> getCursorFactory() {
        return __CURSOR_FACTORY;
    }

    @Internal
    static final class PlayerIdGetter implements IdGetter<Player> {
        @Override
        public long getId(Player object) {
            return object.getId();
        }
    }

    /** To-one relation "team" to target entity "Team". */
    public static final RelationInfo<Player, Team> team =
            new RelationInfo<>(Player_.__INSTANCE, Team_.__INSTANCE, teamId, new ToOneGetter<Player>() {
                @Override
                public ToOne<Team> getToOne(Player entity) {
                    return entity.team;
                }
            });

}
